@use '../variables/base';
@use '../variables/color';
@use '../variables/transition';

@use '../functions' as fn;
@use '../mixins' as mx;

/// Colors for different badge types
/// Sorted by background, text and border color
/// @type Map
$badge-types: (
	primary: (color.$primary, color.$primary-50, color.$primary-600),
	success: (color.$positive-200, color.$positive-900, color.$positive-300),
	danger: (color.$danger-200, color.$danger-900, color.$danger-300),
	warning: (color.$warning-200, color.$warning-900, color.$warning-300),
	dark: (color.$gray-600, #FFF, color.$gray-900),
	light: (color.$gray-100, color.$gray-900, color.$gray-200)
);

.badge {
	--color-badge-background: #{color.$gray-200};
	--color-badge-background-hover: var(--color-badge-border);
	--color-badge-text: #{color.$gray-900};
	--color-badge-border: #{color.$gray-300};
	--spacing-badge-horizontal: #{fn.spacing(.75, true)};
	--spacing-badge-vertical: #{fn.spacing(.5, true)};
	--border-radius-badge: #{base.$corner-radius};
	--border-width-badge: 1px;
	--font-size-badge: var(--blw-text-size-xs);
	--font-weight-badge: 600;

	display: flex;
	gap: var(--spacing-badge-horizontal);
	padding: var(--spacing-badge-vertical) var(--spacing-badge-horizontal);
	border-radius: var(--border-radius-badge);
	background-color: var(--color-badge-background);
	color: var(--color-badge-text);
	font-size: var(--font-size-badge);
	font-weight: var(--font-weight-badge);
	border: var(--border-width-badge) solid var(--color-badge-border);

	&:is(a) {
		color: var(--color-badge-text);
		text-decoration: none;
		transition: background-color transition.$speed-fast;

		&:hover {
			text-decoration: none;
			background-color: var(--color-badge-background-hover);
		}
	}

	&__close,
	&__additional {
		padding: var(--spacing-badge-vertical) var(--spacing-badge-horizontal);
		margin-block: calc(var(--spacing-badge-vertical) * -1);
		margin-inline-end: calc(var(--spacing-badge-horizontal) * -1);
		border-start-end-radius: calc(var(--border-radius-badge) - var(--border-width-badge));
		border-end-end-radius: calc(var(--border-radius-badge) - var(--border-width-badge));
		background-color: var(--color-badge-border);
	}

	&__close {
		display: flex;
		align-items: center;
		background-color: transparent;
		border: 0;
		color: var(--color-badge-text);
		transition: background-color #{transition.$speed-fast};
		line-height: 1;

		&:hover {
			background-color: var(--color-badge-background-hover);
		}

		&:active {
			transition-duration: 0ms;
			background-color: var(--color-badge-background);
		}

		svg {
			width: 1em;
			height: 1em;
		}
	}

	&__additional {
		background-color: var(--color-badge-border);
	}

	@each $type, $colors in $badge-types {
		@include mx.badge-type($type, nth($colors, 1), nth($colors, 2), nth($colors, 3)) {
			@if $type == dark {
				--color-badge-background-hover: #{color.$gray-500};
			}
		};
	}

	.button & {
		line-height: 1;
	}

	.has-floating-badge & {
		position: absolute;
		inset-block-start: calc(var(--spacing-badge-horizontal) * -2.5);
		inset-inline-end: calc(var(--spacing-badge-vertical) * -2.5);
		border-radius: 50vmax;
		z-index: 1;
	}
}
