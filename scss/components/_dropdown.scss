@use '../variables/base';
@use '../variables/color';
@use '../variables/transition';

@use '../functions' as fn;

.dropdown {
	--spacing-item-horizontal: #{fn.spacing(1.25)};
	--spacing-item-vertical: #{fn.spacing()};
	--spacing-list: #{fn.spacing(.75)};
	--offset-list: var(--blw-spacing-sm);
	--min-width-dropdown: 10rem;
	--color-border: #{color.$gray-300};
	--width-border: 1px;
	--border-radius-dropdown: #{base.$corner-radius};
	--base-transform: translateY(var(--offset-list));

	position: relative;

	&__button::after {
		content: '';
		display: inline-block;
		margin-inline-start: 0.3em;
		border-block-start: 0.3em solid;
		border-inline: 0.3em solid transparent;
		border-block-end: 0;
	}

	&__list {
		position: absolute;
		background-color: #FFF;
		border: var(--width-border) solid var(--color-border);
		display: flex;
		flex-direction: column;
		list-style-type: none;
		min-width: var(--min-width-dropdown);
		padding-inline-start: 0;
		margin-block: 0;
		padding-block: var(--spacing-list);
		border-radius: var(--border-radius-dropdown);
		transform: var(--base-transform);

		> li {
			padding-inline: var(--spacing-list);
		}
	}

	&__item {
		--color-text-item: currentColor;
		--color-background-item-hover: #{color.$gray-100};
		--color-background-item-active: #{color.$gray-500};

		display: flex;
		width: 100%;
		border: 0;
		background-color: transparent;
		padding: var(--spacing-item-vertical) var(--spacing-item-horizontal);
		text-decoration: none;
		color: var(--color-text-item);
		transition-property: background-color, color;
		transition-duration: transition.$speed-fast;
		white-space: nowrap;
		word-break: keep-all;
		border-radius: calc(var(--border-radius-dropdown) / 1.5);

		&:is(:hover, :focus-visible) {
			background-color: var(--color-background-item-hover);
		}

		&:is(:active, .is-active) {
			transition-duration: 0ms;
			background-color: var(--color-background-item-active);
			color: #FFF;
		}

		&.is-primary {
			font-weight: 600;
			--color-text-item: #{color.$primary};
			--color-background-item-hover: #{color.$primary-lighter};
			--color-background-item-active: #{color.$primary};
		}

		&.is-destructive {
			--color-text-item: #{color.$danger-600};
			--color-background-item-hover: #{color.$danger-100};
			--color-background-item-active: #{color.$danger-500};
		}

		&.is-disabled {
			pointer-events: none;
			opacity: 0.5;
		}

		&:has(.is-icon),
		&.has-icon {
			align-items: center;
			gap: .5em;
		}
	}

	.is-seperated {
		border-top: var(--width-border) solid var(--color-border);
		margin-block-start: var(--spacing-list);
		padding-block-start: var(--spacing-list);
	}

	&.has-only-icons {
		--min-width-dropdown: 0;

		.dropdown__list {
			width: max-content;
		}
	}

	&.has-icons-last {

		.is-icon {
			margin-inline-start: auto;
		}
	}

	&--start {

		.dropdown__list {
			inset-inline-start: 0;
		}
	}

	&--center {

		.dropdown__button {
			margin-inline: auto;
		}

		.dropdown__list {
			inset-inline-start: 50%;
			transform: translateX(calc(var(--flow-direction) * -50%)) var(--base-transform);
		}
	}

	&--end {

		.dropdown__button {
			margin-inline-start: auto;
		}

		.dropdown__list {
			inset-inline-end: 0;
		}
	}
}
