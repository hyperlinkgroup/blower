@use '../variables/base';
@use '../variables/color';
@use '../variables/transition';

@use '../functions' as fn;
@use '../mixins' as mx;

/// Colors for different alert types
/// @type Map
$alert-types: (
	'success': (
		'background': color.$positive-200,
		'text': color.$positive-900,
		'border-color': color.$positive-300
	),
	'danger': (
		'background': color.$danger-200,
		'text': color.$danger-900,
		'border-color': color.$danger-300
	),
	'warning': (
		'background': color.$warning-200,
		'text': color.$warning-900,
		'border-color': color.$warning-300
	),
	'info': (
		'background': color.$gray-200,
		'text': color.$gray-900,
		'border-color': color.$gray-300
	),
	'dark': (
		'background': color.$gray-600,
		'text': #FFF,
		'border-color': color.$gray-900
	),
	'light': (
		'background': color.$gray-100,
		'text': color.$gray-900,
		'border-color': color.$gray-200
	)
);

$alert-text-types: (
	'success': color.$positive-600,
	'danger': color.$danger-600,
	'warning': color.$warning-600,
	'info': color.$info-600,
);

.alert {
	--color-alert-background: #{color.$primary};
	--color-alert-text: #{color.$primary-50};
	--color-alert-border: #{color.$primary-600};
	--spacing-alert: #{fn.spacing(1.5)};
	--border-radius-alert: #{base.$corner-radius};
	--border-width-alert: 1px;
	--font-size-alert: 1rem;

	position: relative;
	padding: var(--spacing-alert);
	border-radius: var(--border-radius-alert);
	background-color: var(--color-alert-background);
	color: var(--color-alert-text);
	font-size: var(--font-size-alert);
	text-decoration: none;
	border: var(--border-width-alert) solid var(--color-alert-border);

	a {
		color: var(--color-alert-text);
		text-decoration: underline;

		&:hover {
			text-decoration: none;
		}
	}

	hr {
		margin: var(--spacing-alert) 0;
		border: 0;
		border-top: var(--border-width-alert) solid var(--color-alert-border);
	}

	ul, ol {
		padding-inline-start: 2.5ch;
	}

	code {
		background-color: var(--color-alert-border);
	}

	& > * {
		margin: 0;

		& + * {
			margin-top: var(--spacing-alert);
		}
	}

	&__close {
		position: absolute;
		inset-block-start: calc(var(--spacing-alert) / 3);
		inset-inline-end: calc(var(--spacing-alert) / 3);
		background-color: transparent;
		border: 0;
		padding: calc(var(--spacing-alert) / 1.5);
		color: var(--color-alert-text);
		transition: background-color #{transition.$speed-fast};
		margin: 0;
		border-radius: 50%;
		line-height: 1;

		&:hover {
			background-color: var(--color-alert-border);
		}

		&:active {
			transition-duration: 0ms;
			background-color: var(--color-alert-text);
			color: var(--color-alert-background);
		}

		svg {
			width: 1em;
			height: 1em;
		}
	}

	&:is(:has(.alert__close):not(:only-child), .is-dismissible) > :first-child {
		margin-inline-end: calc(var(--spacing-alert) * 2);
	}

	&:is(:has(.alert__close):only-child, .is-dismissible) {
		padding-inline-end: calc(var(--spacing-alert) * 3.5);
	}

	@each $type, $colors in $alert-types {
		@include mx.alert-type($type, map-get($colors, 'background'), map-get($colors, 'text'), map-get($colors, 'border-color'));
	}

	&[class*=alert--text-] {
		--spacing-alert: 0;
		--color-alert-background: transparent;
		--border-width-alert: 0;

		display: inline-block;
	}

	@each $type, $color in $alert-text-types {
		@include mx.alert-text-type($type, $color);
	}
}
